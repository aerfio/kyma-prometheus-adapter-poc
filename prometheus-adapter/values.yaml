# Default values for k8s-prometheus-adapter..
affinity: {}

image:
  repository: directxman12/k8s-prometheus-adapter-amd64
  tag: v0.6.0
  pullPolicy: IfNotPresent

logLevel: 4

metricsRelistInterval: 1m

listenPort: 6443

nodeSelector: {}

priorityClassName: ""

# Url to access prometheus
prometheus:
  url: http://prometheus.default.svc
  port: 9090
  path: ""

replicas: 1

rbac:
  # Specifies whether RBAC resources should be created
  create: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

resources: {}
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  # limits:
  #   cpu: 100m
  #   memory: 128Mi

rules:
  default: true
  custom:
  - seriesQuery: 'request_number_total{pod!="",namespace!=""}'
    resources:
      template: <<.Resource>>
    name:
      matches: "^(.*)_total"
      as: "${1}_per_second"
    metricsQuery: 'sum(rate(<<.Series>>{<<.LabelMatchers>>}[2m])) by (<<.GroupBy>>)'
  # Mounts a configMap with pre-generated rules for use. Overrides the
  # default, custom, external and resource entries
  existing:
  external: []
# - seriesQuery: '{__name__=~"^some_metric_count$"}'
#   resources:
#     template: <<.Resource>>
#   name:
#     matches: ""
#     as: "my_external_metric"
#   metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)
  resource: {}
#   cpu:
#     containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[3m])) by (<<.GroupBy>>)
#     nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[3m])) by (<<.GroupBy>>)
#     resources:
#       overrides:
#         instance:
#           resource: node
#         namespace:
#           resource: namespace
#         pod:
#           resource: pod
#     containerLabel: container
#   memory:
#     containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
#     nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
#     resources:
#       overrides:
#         instance:
#           resource: node
#         namespace:
#           resource: namespace
#         pod:
#           resource: pod
#     containerLabel: container
#   window: 3m

service:
  annotations: {}
  port: 443
  type: ClusterIP

tls:
  enable: false
  ca: |-
    -----BEGIN CERTIFICATE REQUEST-----
    MIIC0jCCAboCAQAwIzEhMB8GA1UEAxMYY3VzdG9tLW1ldHJpY3MtYXBpc2VydmVy
    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA75Isvp+Yfg9GocfLExzq
    rI5LK0e0kOgjK7tEQVsFlP/I6jmhynI0Ck6k3vLpUIxKg5KAESgVDUxFbqj7tRpK
    GD9BjHSNeppOIBBsE+JbrH+b/ZkhkYk800FsjK5bOUbCcHfjDkKV5J6r85KLOd+k
    YmYAFL6iFdvSiJuuTBkxYTXbKNrB5LApwpwYQwieMfkG74EEEd02Vqu4F40xiG8O
    0dJv4ANMHnYwVOgzYw9v9Juw3iFj4+C3f5sV44o34NnBkYYneh/ora2U5Y/Vx1sR
    /jF9gmvi8tmjwZULyFosHE9Z8OWNdnPdvwnGojsjcSoEoBCoVz5a7knszXkIh9Rx
    awIDAQABoGowaAYJKoZIhvcNAQkOMVswWTBXBgNVHREEUDBOgiNjdXN0b20tbWV0
    cmljcy1hcGlzZXJ2ZXIubW9uaXRvcmluZ4InY3VzdG9tLW1ldHJpY3MtYXBpc2Vy
    dmVyLm1vbml0b3Jpbmcuc3ZjMA0GCSqGSIb3DQEBCwUAA4IBAQDIGDRcCs6eBJZX
    9aXlPhcz4dCKcKG7AxRq31J4guCUup1G8JHMzO2TKtcWQGiS/yyXVS/PmfPMWxfL
    Xt2zOvwgOAlihxl1NVzINt6X0Ka5suEjV7xeOq1RXlCWDJZv+I2oqn5imMIyWm7u
    LDCQZ2qNJuTIRbOYIs9fdKWINr1gcD0wi4/2XBzzCgHYMw0cAsGGZu/tNFPPuW/8
    AHept6UKCQvjDobqX3TaMteSu15CvBemxrs1s8H7Lzqcqp4JP5/P+k73wIvuluig
    3JLap7OVHP9lW7g0xfor2wun2Knoy+PhAr+dxrW+whgCoPm6+msRU371Lt628x6D
    OuS/YSPI
    -----END CERTIFICATE REQUEST-----
  key: |-
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpQIBAAKCAQEA75Isvp+Yfg9GocfLExzqrI5LK0e0kOgjK7tEQVsFlP/I6jmh
    ynI0Ck6k3vLpUIxKg5KAESgVDUxFbqj7tRpKGD9BjHSNeppOIBBsE+JbrH+b/Zkh
    kYk800FsjK5bOUbCcHfjDkKV5J6r85KLOd+kYmYAFL6iFdvSiJuuTBkxYTXbKNrB
    5LApwpwYQwieMfkG74EEEd02Vqu4F40xiG8O0dJv4ANMHnYwVOgzYw9v9Juw3iFj
    4+C3f5sV44o34NnBkYYneh/ora2U5Y/Vx1sR/jF9gmvi8tmjwZULyFosHE9Z8OWN
    dnPdvwnGojsjcSoEoBCoVz5a7knszXkIh9RxawIDAQABAoIBAQCBYC9JwmZXrWg3
    de31JGiXR0DQ3qhkmPhlZXw2zzD0hi26T+VPrtzrtAzVWdkl5p1W8Ia4vSyhQc89
    M4S7CLd64K5Fa6v7ydjm9/dlxZg8T62uBkRalAKFE4/LaV1aURwwII495TeNfyLd
    JwaI+n2LpgnlKg3eQBgyLeCyt+gy1hdJDToK9upIDQ/YGLMeMZW7inAnXCpmgRMK
    B2Xm2DDgWDC5wzilfUIgtTf4LJvHLJyY97ilDFdGhjSIWSft9NNC1nt+SMUXzZem
    W3kcH3AM40z+gP1wt6IOYcLUD3n4YF5tW5a3Todu/UFCSA98xVBVpdRlWY1HRPyv
    1Jpy4uwBAoGBAPaUzzHUnCEmSYi0fJF37F7X+L1Nn4kBQvBAEgJ6N/yKX0lrNiaX
    Qoc4YWh8gcbWBFDMjnnRjhjySJISuNLOEYJcxE+7GSSkvRDHXE+9me0d0gzBKScA
    3PskcpdSVHfU4s22+6ULCmWEUzC724DipsC7MaxqsRy/dS3D+hPrDJSZAoGBAPi4
    0L+RzqwIP2hm56DuGFEynMrN35LtZgy85ymg+kGNSVzzuzDOkOLCx+MbhpKGOhFU
    jTtWzNv8Nk/cwU5Wn/aWIiTnu78rhil4kM7HYMREOcGF55D/ByuUT7KRM+VK79rT
    L8fgugdK4cB+JaPpGLJW0qTP+w3NBVNBYqR4sPSjAoGBAICb4O12nPBVTek1aftd
    dzWIo73orJsCw20Xnc0Y/faEHWrntliucA6jA3tB5VZV7e5Oosk62Uh9pgg6J5gb
    ztoVlHaZeWW5XrtPoAAfPheEhDgOz23+b0O2IOZ4FIJj0N/G3r2YYpXMTK+Qa85v
    aNYBTMlG5JW/7lgubVLSN7+RAoGAanMnHKZ57tUE1lkcj5r3m2DvDDl6k7a5M4Bx
    6zYzhXTDzl2eYzA1gGffBwtT2EhMd/hZDemDei+Cy0FvFmkqw23UJTls+E/Xds5c
    I7PfbYDJu1LlHgCYgAVU6tcMf/lHmL9ENuaul8prvmf/Eh0EbeeM9e7xwyFZQx27
    6yqgicMCgYEAhxQ0y0EJmkouOOW2WKJzumswhw8AYk5U637S4io+tDKJNvG7mvLd
    CDZDot2eOHKJO28WjGAN6DsbBRgyUF6pwEyzxN5DdLrshEzoJC3n23Z5XErHdAYt
    maeZuxUxRVZmhiyFWv+E8SYWrI9ndqcVZ8GhYRUzvUu/pqqH1bje8Cs=
    -----END RSA PRIVATE KEY-----    
  certificate: |-
    -----BEGIN CERTIFICATE-----
    MIIDWDCCAkCgAwIBAgIUL+6dnpnRpYrdf4Q47vmQ2eJkPRUwDQYJKoZIhvcNAQEL
    BQAwDTELMAkGA1UEAwwCY2EwHhcNMjAwNzE1MTE1NTAwWhcNMjUwNzE0MTE1NTAw
    WjAjMSEwHwYDVQQDExhjdXN0b20tbWV0cmljcy1hcGlzZXJ2ZXIwggEiMA0GCSqG
    SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvkiy+n5h+D0ahx8sTHOqsjksrR7SQ6CMr
    u0RBWwWU/8jqOaHKcjQKTqTe8ulQjEqDkoARKBUNTEVuqPu1GkoYP0GMdI16mk4g
    EGwT4lusf5v9mSGRiTzTQWyMrls5RsJwd+MOQpXknqvzkos536RiZgAUvqIV29KI
    m65MGTFhNdso2sHksCnCnBhDCJ4x+QbvgQQR3TZWq7gXjTGIbw7R0m/gA0wedjBU
    6DNjD2/0m7DeIWPj4Ld/mxXjijfg2cGRhid6H+itrZTlj9XHWxH+MX2Ca+Ly2aPB
    lQvIWiwcT1nw5Y12c92/CcaiOyNxKgSgEKhXPlruSezNeQiH1HFrAgMBAAGjgZkw
    gZYwDgYDVR0PAQH/BAQDAgWgMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFNO+qOoq
    TThxKxTYWPUcTp9QpBwJMFcGA1UdEQRQME6CI2N1c3RvbS1tZXRyaWNzLWFwaXNl
    cnZlci5tb25pdG9yaW5ngidjdXN0b20tbWV0cmljcy1hcGlzZXJ2ZXIubW9uaXRv
    cmluZy5zdmMwDQYJKoZIhvcNAQELBQADggEBAFQ4zduUBUti7enekuEzbJFRwge7
    evaJlCSjHF101hRQC1b/TyS9x4YwmfUNiDdOOPiRG6zoaMTPUwikSUXjvTt7x1jR
    wtQNgyojpc6M8/5abECMhTa0/JzVWrSZtyTC/3RTP3GxbTB4jNaLGHdZY8ce+zfC
    o8UfWiTqDiedIM4Wycn3ICXfn8jHtvyCDgdT7HcnCajqE27F18Xr4EF+a9jisO4u
    SkDpZkIXZhpCYgryjnwJNbHNn+bS7nO+kgf53xMf0MK4Pu3cz1iz6f8rx8Gn+YIn
    x1FdEJlYeQ6MGxcg4vwCsnppyjzti5CC33u/3sFatH2DYnPYbvtkB0kN/Qw=
    -----END CERTIFICATE-----

# Any extra volumes
extraVolumes: []
  # - name: example-name
  #   hostPath:
  #     path: /path/on/host
  #     type: DirectoryOrCreate
  # - name: ssl-certs
  #   hostPath:
  #     path: /etc/ssl/certs/ca-bundle.crt
  #     type: File

# Any extra volume mounts
extraVolumeMounts: []
  #   - name: example-name
  #     mountPath: /path/in/container
  #   - name: ssl-certs
  #     mountPath: /etc/ssl/certs/ca-certificates.crt
  #     readOnly: true

tolerations: []

# Labels added to the pod
podLabels: {}

# Annotations added to the pod
podAnnotations: {}

hostNetwork:
  # Specifies if prometheus-adapter should be started in hostNetwork mode.
  #
  # You would require this enabled if you use alternate overlay networking for pods and
  # API server unable to communicate with metrics-server. As an example, this is required
  # if you use Weave network on EKS
  enabled: false
